{"ast":null,"code":"import _asyncToGenerator from \"/Users/ctb/RIT/SWEN-101/NH/front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-type': 'application/x-www-form-urlencoded' // 'Content-Type': 'application/json',\n\n  }),\n  withCredentials: true\n};\nexport class UsersService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:3000';\n  }\n\n  login(form) {\n    let url = this.apiUrl + '/users/login';\n    let json = JSON.stringify(form);\n    return this.http.post(url, json, httpOptions);\n  }\n\n  register(form) {\n    let url = this.apiUrl + '/users/register';\n    let json = {\n      name: form.value.name,\n      email: form.value.email,\n      password: form.value.password\n    };\n    console.log(json);\n    return this.http.post(url, json, httpOptions);\n  }\n\n  loggedIn() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let url = _this.apiUrl + '/users/loggedIn';\n\n      let token = _this.getToken();\n\n      res = yield _this.http.post(url, token, httpOptions);\n      return !!localStorage.getItem('token');\n    })();\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  logOut() {\n    localStorage.removeItem('token');\n    this.router.navigate(['/']);\n  }\n\n  getUser() {\n    let token = this.getToken();\n    let data = {\n      jwt: token\n    };\n    let url = this.apiUrl + '/users/get';\n    return this.http.post(url, data, httpOptions);\n  }\n\n  updateUser(data) {\n    let url = this.apiUrl + '/users/update';\n    let token = this.getToken();\n    let post_data = {\n      stats: data.stats,\n      notif: data.notif,\n      identity: data.identity,\n      jwt: token\n    };\n    return this.http.post(url, post_data, httpOptions);\n  }\n\n}\n\nUsersService.ɵfac = function UsersService_Factory(t) {\n  return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nUsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UsersService,\n  factory: UsersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/ctb/RIT/SWEN-101/NH/front-end/src/app/services/users.service.ts"],"names":["HttpHeaders","i0","i1","i2","httpOptions","headers","withCredentials","UsersService","constructor","http","router","apiUrl","login","form","url","json","JSON","stringify","post","register","name","value","email","password","console","log","loggedIn","token","getToken","res","localStorage","getItem","logOut","removeItem","navigate","getUser","data","jwt","updateUser","post_data","stats","notif","identity","ɵfac","UsersService_Factory","t","ɵɵinject","HttpClient","Router","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst httpOptions = {\n    headers: new HttpHeaders({\n        'Content-type': 'application/x-www-form-urlencoded',\n        // 'Content-Type': 'application/json',\n    }),\n    withCredentials: true,\n};\nexport class UsersService {\n    constructor(http, router) {\n        this.http = http;\n        this.router = router;\n        this.apiUrl = 'http://localhost:3000';\n    }\n    login(form) {\n        let url = this.apiUrl + '/users/login';\n        let json = JSON.stringify(form);\n        return this.http.post(url, json, httpOptions);\n    }\n    register(form) {\n        let url = this.apiUrl + '/users/register';\n        let json = {\n            name: form.value.name,\n            email: form.value.email,\n            password: form.value.password,\n        };\n        console.log(json);\n        return this.http.post(url, json, httpOptions);\n    }\n    async loggedIn() {\n        let url = this.apiUrl + '/users/loggedIn';\n        let token = this.getToken();\n        res = await this.http.post(url, token, httpOptions);\n        return !!localStorage.getItem('token');\n    }\n    getToken() {\n        return localStorage.getItem('token');\n    }\n    logOut() {\n        localStorage.removeItem('token');\n        this.router.navigate(['/']);\n    }\n    getUser() {\n        let token = this.getToken();\n        let data = {\n            jwt: token,\n        };\n        let url = this.apiUrl + '/users/get';\n        return this.http.post(url, data, httpOptions);\n    }\n    updateUser(data) {\n        let url = this.apiUrl + '/users/update';\n        let token = this.getToken();\n        let post_data = {\n            stats: data.stats,\n            notif: data.notif,\n            identity: data.identity,\n            jwt: token,\n        };\n        return this.http.post(url, post_data, httpOptions);\n    }\n}\nUsersService.ɵfac = function UsersService_Factory(t) { return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\nUsersService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UsersService, factory: UsersService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}